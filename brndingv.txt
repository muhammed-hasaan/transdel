const mongoose = require("mongoose")

// Define the Custom Branding Schema (keep existing)
const customBrandingSchema = new mongoose.Schema({
  id: { type: String, required: true },
  companyName: { type: String },
  interviewTitle: { type: String },
  brandColor: { type: String, default: "#5563FF" },
  logoUrl: { type: String },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
})

// Define the Email Templates Schema (new separate schema)
const emailTemplateSchema = new mongoose.Schema({
  id: { type: String, required: true },
  templateName: { type: String, required: true },
  templateType: { type: String, required: true }, // 'Invitation', 'Reminder', 'Interview Completed', etc.
  language: { type: String, default: "English (English)" },
  replyTo: { type: String },
  subject: { type: String },
  content: { type: String, required: true },
  isActive: { type: Boolean, default: true },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
})

// Define the User Schema
const userSchema = new mongoose.Schema(
  {
    userId: {
      type: String,
    },
    userName: {
      type: String,
    },
    companyName: {
      type: String,
    },
    companyEmail: {
      type: String,
    },
    companyLocation: {
      type: String,
    },
    companyEmailPassword: {
      type: String,
    },
    otp: { type: String },
    otpExpiry: { type: Date },
    Status: { type: String },
    Limit: { type: Number },
    Plan: { type: String },
    CreatedInterviews: { type: Number },
    customBrandings: [customBrandingSchema], // Keep existing custom branding
    emailTemplates: [emailTemplateSchema], // Add new email templates field
  },
  {
    timestamps: true,
  },
)

module.exports = mongoose.model("User", userSchema)











/ Email Template Methods
const createEmailTemplate = async (req, res) => {
  try {
    const { userId, templateName, templateType, language, replyTo, subject, content } = req.body

    const user = await User.findOne({ userId })
    if (!user) {
      return res.status(404).json({ message: "User not found" })
    }

    const newTemplate = {
      id: Date.now().toString(),
      templateName,
      templateType,
      language: language || "English (English)",
      replyTo: replyTo || "",
      subject: subject || `${templateName} - ${templateType}`,
      content,
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    }

    user.emailTemplates.push(newTemplate)
    await user.save()

    res.status(201).json({
      message: "Email template created successfully",
      template: newTemplate,
    })
  } catch (error) {
    res.status(500).json({ message: "Error creating email template", error: error.message })
  }
}

const getEmailTemplates = async (req, res) => {
  try {
    const { userId } = req.body

    const user = await User.findOne({ userId })
    if (!user) {
      return res.status(404).json({ message: "User not found" })
    }

    res.status(200).json({
      message: "Email templates retrieved successfully",
      templates: user.emailTemplates || [],
    })
  } catch (error) {
    res.status(500).json({ message: "Error retrieving email templates", error: error.message })
  }
}

const updateEmailTemplate = async (req, res) => {
  try {
    const { userId, templateId, templateName, templateType, language, replyTo, subject, content } = req.body

    const user = await User.findOne({ userId })
    if (!user) {
      return res.status(404).json({ message: "User not found" })
    }

    const templateIndex = user.emailTemplates.findIndex((template) => template.id === templateId)
    if (templateIndex === -1) {
      return res.status(404).json({ message: "Email template not found" })
    }

    // Update template fields
    user.emailTemplates[templateIndex].templateName = templateName
    user.emailTemplates[templateIndex].templateType = templateType
    user.emailTemplates[templateIndex].language = language
    user.emailTemplates[templateIndex].replyTo = replyTo
    user.emailTemplates[templateIndex].subject = subject
    user.emailTemplates[templateIndex].content = content
    user.emailTemplates[templateIndex].updatedAt = new Date()

    await user.save()

    res.status(200).json({
      message: "Email template updated successfully",
      template: user.emailTemplates[templateIndex],
    })
  } catch (error) {
    res.status(500).json({ message: "Error updating email template", error: error.message })
  }
}

const deleteEmailTemplate = async (req, res) => {
  try {
    const { userId, templateId } = req.body

    const user = await User.findOne({ userId })
    if (!user) {
      return res.status(404).json({ message: "User not found" })
    }

    user.emailTemplates = user.emailTemplates.filter((template) => template.id !== templateId)
    await user.save()

    res.status(200).json({ message: "Email template deleted successfully" })
  } catch (error) {
    res.status(500).json({ message: "Error deleting email template", error: error.message })
  }
}

const toggleEmailTemplateStatus = async (req, res) => {
  try {
    const { userId, templateId } = req.body

    const user = await User.findOne({ userId })
    if (!user) {
      return res.status(404).json({ message: "User not found" })
    }

    const templateIndex = user.emailTemplates.findIndex((template) => template.id === templateId)
    if (templateIndex === -1) {
      return res.status(404).json({ message: "Email template not found" })
    }

    user.emailTemplates[templateIndex].isActive = !user.emailTemplates[templateIndex].isActive
    user.emailTemplates[templateIndex].updatedAt = new Date()

    await user.save()

    res.status(200).json({
      message: "Email template status updated successfully",
      template: user.emailTemplates[templateIndex],
    })
  } catch (error) {
    res.status(500).json({ message: "Error updating email template status", error: error.message })
  }
}

module.exports = {
  RegisterUser,
  LoginUser,
  GetUsers,
  UpdateUser,
  DeleteUser,
  updateFullUser,
  GetUserById,
  GetUserByEmail,
  GetUserByUserId,
  VerifyOTP,
  createEmailTemplate,
  getEmailTemplates,
  updateEmailTemplate,
  deleteEmailTemplate,
  toggleEmailTemplateStatus,
}


contoleers





const express = require("express")
const Router = express.Router()
const userController = require("../../Controller/UserControllers/UserController")

// Existing routes
Router.post("/Register", userController.RegisterUser)
Router.post("/Login", userController.LoginUser)
Router.get("/GetUsers", userController.GetUsers)
Router.put("/UpdateUser", userController.UpdateUser)
Router.post("/DeleteUser", userController.DeleteUser)
Router.put("/UpdateFullUser", userController.updateFullUser)
Router.post("/GetUserById", userController.GetUserById)
Router.post("/GetUserByEmail", userController.GetUserByEmail)
Router.post("/GetUserByUserId", userController.GetUserByUserId)
Router.post("/VerifyOTP", userController.VerifyOTP)

// Email Template routes
Router.post("/CreateEmailTemplate", userController.createEmailTemplate)
Router.post("/GetEmailTemplates", userController.getEmailTemplates)
Router.put("/UpdateEmailTemplate", userController.updateEmailTemplate)
Router.post("/DeleteEmailTemplate", userController.deleteEmailTemplate)
Router.put("/ToggleEmailTemplateStatus", userController.toggleEmailTemplateStatus)

module.exports = Router


routes











"use client"

import { useState, useEffect } from "react"
import {
  FiPlus,
  FiEdit,
  FiTrash2,
  FiEye,
  FiX,
  FiBold,
  FiItalic,
  FiLink,
  FiList,
  FiAlignLeft,
  FiMail,
  FiToggleLeft,
  FiToggleRight,
} from "react-icons/fi"

const TemplateEmail = () => {
  const [templates, setTemplates] = useState([])
  const [showAddModal, setShowAddModal] = useState(false)
  const [showSelectModal, setShowSelectModal] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)
  const [showPreviewModal, setShowPreviewModal] = useState(false)
  const [selectedTemplate, setSelectedTemplate] = useState(null)
  const [editingTemplate, setEditingTemplate] = useState(null)
  const [previewTemplate, setPreviewTemplate] = useState(null)
  const [activeTab, setActiveTab] = useState("Email")

  // Form states
  const [templateName, setTemplateName] = useState("")
  const [templateType, setTemplateType] = useState("")
  const [language, setLanguage] = useState("English (English)")
  const [replyTo, setReplyTo] = useState("")
  const [subject, setSubject] = useState("")
  const [content, setContent] = useState("")

  // Base templates
  const baseTemplates = [
    {
      id: "invitation",
      name: "Invitation",
      type: "Interview Invitation",
      subject: "Interview Invitation - [job_title] Position",
      content: `Hi [candidate_first_name],

I hope this finds you well and thanks for your interest in our [job_title] role. We look forward to learning more about you.

The next step is a brief video interview with [number_of_questions] question(s). It will only take a few minutes. Please complete the interview within the next 48 hours. For best results, ensure you are in a quiet room with a stable internet connection and good lighting.

Start your interview here: [interview_url]

We recommend using the Chrome browser on any laptop or smartphone. If you are using an iPhone, please use Safari.

Should you have any questions, feel free to reach out.

Best of luck!

[your_first_name]
[your_last_name]
[company_name]`,
    },
    {
      id: "reminder",
      name: "Reminder",
      type: "Interview Reminder",
      subject: "Reminder: Complete Your Interview - [job_title] Position",
      content: `Hi [candidate_first_name],

This is a friendly reminder about your video interview for the [job_title] position at [company_name].

Please complete your interview by [deadline_date]. The interview should take approximately [estimated_time] minutes.

Start your interview here: [interview_url]

If you have any technical issues or questions, please don't hesitate to reach out.

Best regards,
[your_first_name]
[company_name]`,
    },
    {
      id: "completed",
      name: "Interview Completed",
      type: "Interview Completion",
      subject: "Thank you for completing your interview - [job_title] Position",
      content: `Hi [candidate_first_name],

Thank you for completing your video interview for the [job_title] position. We appreciate the time you took to share your experience with us.

Our team will review your responses and get back to you within [review_timeframe] business days.

If you have any questions in the meantime, please feel free to contact us.

Best regards,
[your_first_name]
[company_name]`,
    },
  ]

  // Get current user ID (you'll need to implement this based on your auth system)
  const getCurrentUserId = () => {
    // Replace this with your actual user ID retrieval logic
    return localStorage.getItem("userId") || "user123"
  }

  // Load templates on component mount
  useEffect(() => {
    loadTemplates()
  }, [])

  const loadTemplates = async () => {
    try {
      const response = await fetch("/api/users/GetEmailTemplates", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId: getCurrentUserId(),
        }),
      })

      const data = await response.json()
      if (response.ok) {
        setTemplates(data.templates || [])
      }
    } catch (error) {
      console.error("Error loading templates:", error)
    }
  }

  const handleCreateTemplate = () => {
    setShowSelectModal(true)
  }

  const handleSelectBaseTemplate = (baseTemplate) => {
    setSelectedTemplate(baseTemplate)
    setTemplateName(baseTemplate.name)
    setTemplateType(baseTemplate.type)
    setSubject(baseTemplate.subject)
    setContent(baseTemplate.content)
    setShowSelectModal(false)
    setShowEditModal(true)
  }

  const handleSaveTemplate = async () => {
    try {
      const response = await fetch("/api/users/CreateEmailTemplate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId: getCurrentUserId(),
          templateName,
          templateType,
          language,
          replyTo,
          subject,
          content,
        }),
      })

      const data = await response.json()
      if (response.ok) {
        setTemplates([...templates, data.template])
        resetForm()
        setShowEditModal(false)
      } else {
        alert("Error creating template: " + data.message)
      }
    } catch (error) {
      console.error("Error saving template:", error)
      alert("Error saving template")
    }
  }

  const handleEditTemplate = (template) => {
    setEditingTemplate(template)
    setTemplateName(template.templateName)
    setTemplateType(template.templateType)
    setLanguage(template.language || "English (English)")
    setReplyTo(template.replyTo || "")
    setSubject(template.subject || "")
    setContent(template.content || "")
    setShowEditModal(true)
  }

  const handleUpdateTemplate = async () => {
    try {
      const response = await fetch("/api/users/UpdateEmailTemplate", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId: getCurrentUserId(),
          templateId: editingTemplate.id,
          templateName,
          templateType,
          language,
          replyTo,
          subject,
          content,
        }),
      })

      const data = await response.json()
      if (response.ok) {
        setTemplates(templates.map((t) => (t.id === editingTemplate.id ? data.template : t)))
        resetForm()
        setShowEditModal(false)
        setEditingTemplate(null)
      } else {
        alert("Error updating template: " + data.message)
      }
    } catch (error) {
      console.error("Error updating template:", error)
      alert("Error updating template")
    }
  }

  const handleDeleteTemplate = async (templateId) => {
    if (window.confirm("Are you sure you want to delete this template?")) {
      try {
        const response = await fetch("/api/users/DeleteEmailTemplate", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            userId: getCurrentUserId(),
            templateId,
          }),
        })

        if (response.ok) {
          setTemplates(templates.filter((t) => t.id !== templateId))
        } else {
          alert("Error deleting template")
        }
      } catch (error) {
        console.error("Error deleting template:", error)
        alert("Error deleting template")
      }
    }
  }

  const handleToggleTemplate = async (templateId) => {
    try {
      const response = await fetch("/api/users/ToggleEmailTemplateStatus", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId: getCurrentUserId(),
          templateId,
        }),
      })

      const data = await response.json()
      if (response.ok) {
        setTemplates(templates.map((t) => (t.id === templateId ? data.template : t)))
      } else {
        alert("Error updating template status")
      }
    } catch (error) {
      console.error("Error updating template status:", error)
      alert("Error updating template status")
    }
  }

  const handlePreviewTemplate = (template) => {
    setPreviewTemplate(template)
    setShowPreviewModal(true)
  }

  const resetForm = () => {
    setTemplateName("")
    setTemplateType("")
    setLanguage("English (English)")
    setReplyTo("")
    setSubject("")
    setContent("")
    setSelectedTemplate(null)
    setEditingTemplate(null)
  }

  const closeAllModals = () => {
    setShowAddModal(false)
    setShowSelectModal(false)
    setShowEditModal(false)
    setShowPreviewModal(false)
    resetForm()
  }

  const formatContent = (text, type) => {
    const textarea = document.querySelector(".template-editor")
    if (!textarea) return

    const start = textarea.selectionStart
    const end = textarea.selectionEnd
    const selectedText = text.substring(start, end)

    let formattedText = selectedText
    switch (type) {
      case "bold":
        formattedText = `**${selectedText}**`
        break
      case "italic":
        formattedText = `*${selectedText}*`
        break
      case "link":
        formattedText = `[${selectedText}](url)`
        break
      default:
        break
    }

    const newContent = text.substring(0, start) + formattedText + text.substring(end)
    setContent(newContent)
  }

  return (
    <div style={{ padding: "20px", backgroundColor: "#f8f9fa", minHeight: "100vh" }}>
      <div
        style={{
          backgroundColor: "white",
          borderRadius: "8px",
          padding: "24px",
          boxShadow: "0 2px 4px rgba(0,0,0,0.1)",
        }}
      >
        {/* Header */}
        <div style={{ marginBottom: "24px" }}>
          <h2 style={{ fontSize: "24px", fontWeight: "bold", marginBottom: "8px", color: "#1a1a1a" }}>
            Email, SMS & WhatsApp Templates
          </h2>
          <p style={{ color: "#666", fontSize: "14px" }}>
            Create and edit Email and SMS templates to use them on your candidate notifications
          </p>
        </div>

        {/* Tabs */}
        <div style={{ marginBottom: "24px", borderBottom: "1px solid #e5e5e5" }}>
          <div style={{ display: "flex", gap: "24px" }}>
            {["Email", "SMS", "WhatsApp"].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                style={{
                  padding: "12px 16px",
                  border: "none",
                  backgroundColor: "transparent",
                  color: activeTab === tab ? "#5563FF" : "#666",
                  borderBottom: activeTab === tab ? "2px solid #5563FF" : "2px solid transparent",
                  cursor: "pointer",
                  fontSize: "14px",
                  fontWeight: "500",
                }}
              >
                {tab}
              </button>
            ))}
          </div>
        </div>

        {/* Create Template Button */}
        <button
          onClick={handleCreateTemplate}
          style={{
            display: "flex",
            alignItems: "center",
            gap: "8px",
            padding: "12px 16px",
            backgroundColor: "transparent",
            border: "2px dashed #5563FF",
            borderRadius: "8px",
            color: "#5563FF",
            cursor: "pointer",
            fontSize: "14px",
            fontWeight: "500",
            marginBottom: "24px",
            width: "100%",
          }}
        >
          <FiPlus size={16} />
          Create an email template
        </button>

        {/* Templates List */}
        <div style={{ display: "flex", flexDirection: "column", gap: "12px" }}>
          {templates.map((template) => (
            <div
              key={template.id}
              style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                padding: "16px",
                border: "1px solid #e5e5e5",
                borderRadius: "8px",
                backgroundColor: template.isActive ? "#f8f9fa" : "#f0f0f0",
                opacity: template.isActive ? 1 : 0.7,
              }}
            >
              <div style={{ display: "flex", alignItems: "center", gap: "12px" }}>
                <div
                  style={{
                    width: "40px",
                    height: "40px",
                    backgroundColor: template.isActive ? "#5563FF" : "#999",
                    borderRadius: "8px",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                  }}
                >
                  <FiMail color="white" size={20} />
                </div>
                <div>
                  <div style={{ fontSize: "14px", fontWeight: "500", color: "#1a1a1a" }}>{template.templateName}</div>
                  <div style={{ fontSize: "12px", color: "#666" }}>{template.templateType}</div>
                </div>
              </div>
              <div style={{ display: "flex", gap: "8px", alignItems: "center" }}>
                <button
                  onClick={() => handleToggleTemplate(template.id)}
                  style={{
                    padding: "8px",
                    border: "none",
                    backgroundColor: "transparent",
                    cursor: "pointer",
                    borderRadius: "4px",
                  }}
                  title={template.isActive ? "Deactivate template" : "Activate template"}
                >
                  {template.isActive ? (
                    <FiToggleRight size={20} color="#5563FF" />
                  ) : (
                    <FiToggleLeft size={20} color="#999" />
                  )}
                </button>
                <button
                  onClick={() => handlePreviewTemplate(template)}
                  style={{
                    padding: "8px",
                    border: "none",
                    backgroundColor: "transparent",
                    cursor: "pointer",
                    borderRadius: "4px",
                  }}
                >
                  <FiEye size={16} color="#666" />
                </button>
                <button
                  onClick={() => handleEditTemplate(template)}
                  style={{
                    padding: "8px",
                    border: "none",
                    backgroundColor: "transparent",
                    cursor: "pointer",
                    borderRadius: "4px",
                  }}
                >
                  <FiEdit size={16} color="#666" />
                </button>
                <button
                  onClick={() => handleDeleteTemplate(template.id)}
                  style={{
                    padding: "8px",
                    border: "none",
                    backgroundColor: "transparent",
                    cursor: "pointer",
                    borderRadius: "4px",
                  }}
                >
                  <FiTrash2 size={16} color="#666" />
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Select Base Template Modal */}
      {showSelectModal && (
        <div
          style={{
            position: "fixed",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: "rgba(0,0,0,0.5)",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            zIndex: 1000,
          }}
        >
          <div
            style={{
              backgroundColor: "white",
              borderRadius: "12px",
              width: "800px",
              maxHeight: "80vh",
              overflow: "hidden",
              display: "flex",
            }}
          >
            {/* Left Panel */}
            <div style={{ width: "300px", padding: "24px", borderRight: "1px solid #e5e5e5" }}>
              <div
                style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: "20px" }}
              >
                <h3 style={{ fontSize: "18px", fontWeight: "bold", margin: 0 }}>Select a base template</h3>
                <button
                  onClick={closeAllModals}
                  style={{ border: "none", backgroundColor: "transparent", cursor: "pointer" }}
                >
                  <FiX size={20} />
                </button>
              </div>

              <div style={{ marginBottom: "20px" }}>
                <label style={{ display: "block", marginBottom: "8px", fontSize: "14px", fontWeight: "500" }}>
                  Template
                </label>
                <select
                  style={{
                    width: "100%",
                    padding: "8px 12px",
                    border: "1px solid #e5e5e5",
                    borderRadius: "6px",
                    fontSize: "14px",
                  }}
                  onChange={(e) => {
                    const selected = baseTemplates.find((t) => t.id === e.target.value)
                    setSelectedTemplate(selected)
                  }}
                >
                  <option value="">Select template</option>
                  {baseTemplates.map((template) => (
                    <option key={template.id} value={template.id}>
                      {template.name}
                    </option>
                  ))}
                </select>
              </div>

              <button
                onClick={() => selectedTemplate && handleSelectBaseTemplate(selectedTemplate)}
                disabled={!selectedTemplate}
                style={{
                  width: "100%",
                  padding: "12px",
                  backgroundColor: selectedTemplate ? "#5563FF" : "#ccc",
                  color: "white",
                  border: "none",
                  borderRadius: "6px",
                  cursor: selectedTemplate ? "pointer" : "not-allowed",
                  fontSize: "14px",
                  fontWeight: "500",
                }}
              >
                Create template
              </button>
            </div>

            {/* Right Panel - Preview */}
            <div style={{ flex: 1, padding: "24px", backgroundColor: "#f8f9fa" }}>
              <h4 style={{ fontSize: "16px", fontWeight: "bold", marginBottom: "16px" }}>Preview</h4>
              {selectedTemplate ? (
                <div
                  style={{
                    backgroundColor: "white",
                    padding: "16px",
                    borderRadius: "8px",
                    border: "1px solid #e5e5e5",
                    fontSize: "14px",
                    lineHeight: "1.5",
                    whiteSpace: "pre-wrap",
                  }}
                >
                  <div style={{ marginBottom: "12px", fontSize: "12px", color: "#666" }}>
                    <div>from: hr@company.com</div>
                    <div>to: John Doe john.doe@email.com</div>
                    <div>reply to: hr@company.com</div>
                    <div>subject: {selectedTemplate.subject}</div>
                  </div>
                  <div style={{ borderTop: "1px solid #e5e5e5", paddingTop: "12px" }}>{selectedTemplate.content}</div>
                </div>
              ) : (
                <div style={{ color: "#666", fontStyle: "italic" }}>Select a template to see preview</div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Edit Template Modal */}
      {showEditModal && (
        <div
          style={{
            position: "fixed",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: "rgba(0,0,0,0.5)",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            zIndex: 1000,
          }}
        >
          <div
            style={{
              backgroundColor: "white",
              borderRadius: "12px",
              width: "600px",
              maxHeight: "80vh",
              overflow: "auto",
            }}
          >
            <div style={{ padding: "24px" }}>
              <div
                style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: "20px" }}
              >
                <h3 style={{ fontSize: "18px", fontWeight: "bold", margin: 0 }}>
                  {editingTemplate ? "Edit Email Template" : "Email template"}
                </h3>
                <button
                  onClick={closeAllModals}
                  style={{ border: "none", backgroundColor: "transparent", cursor: "pointer" }}
                >
                  <FiX size={20} />
                </button>
              </div>

              <div style={{ marginBottom: "20px" }}>
                <label style={{ display: "block", marginBottom: "8px", fontSize: "14px", fontWeight: "500" }}>
                  Template Name
                </label>
                <input
                  type="text"
                  value={templateName}
                  onChange={(e) => setTemplateName(e.target.value)}
                  style={{
                    width: "100%",
                    padding: "8px 12px",
                    border: "1px solid #e5e5e5",
                    borderRadius: "6px",
                    fontSize: "14px",
                  }}
                  placeholder="Enter template name"
                />
              </div>

              <div style={{ marginBottom: "20px" }}>
                <label style={{ display: "block", marginBottom: "8px", fontSize: "14px", fontWeight: "500" }}>
                  Template Type
                </label>
                <input
                  type="text"
                  value={templateType}
                  onChange={(e) => setTemplateType(e.target.value)}
                  style={{
                    width: "100%",
                    padding: "8px 12px",
                    border: "1px solid #e5e5e5",
                    borderRadius: "6px",
                    fontSize: "14px",
                  }}
                  placeholder="e.g., Interview Invitation, Reminder, etc."
                />
              </div>

              <div style={{ marginBottom: "20px" }}>
                <label style={{ display: "block", marginBottom: "8px", fontSize: "14px", fontWeight: "500" }}>
                  Language
                </label>
                <select
                  value={language}
                  onChange={(e) => setLanguage(e.target.value)}
                  style={{
                    width: "100%",
                    padding: "8px 12px",
                    border: "1px solid #e5e5e5",
                    borderRadius: "6px",
                    fontSize: "14px",
                  }}
                >
                  <option value="English (English)">English (English)</option>
                  <option value="Spanish (Español)">Spanish (Español)</option>
                  <option value="French (Français)">French (Français)</option>
                </select>
              </div>

              <div style={{ marginBottom: "20px" }}>
                <label style={{ display: "block", marginBottom: "8px", fontSize: "14px", fontWeight: "500" }}>
                  Custom Reply-To address
                </label>
                <input
                  type="email"
                  value={replyTo}
                  onChange={(e) => setReplyTo(e.target.value)}
                  style={{
                    width: "100%",
                    padding: "8px 12px",
                    border: "1px solid #e5e5e5",
                    borderRadius: "6px",
                    fontSize: "14px",
                  }}
                  placeholder="hr@company.com"
                />
              </div>

              <div style={{ marginBottom: "20px" }}>
                <label style={{ display: "block", marginBottom: "8px", fontSize: "14px", fontWeight: "500" }}>
                  Subject Line
                </label>
                <input
                  type="text"
                  value={subject}
                  onChange={(e) => setSubject(e.target.value)}
                  style={{
                    width: "100%",
                    padding: "8px 12px",
                    border: "1px solid #e5e5e5",
                    borderRadius: "6px",
                    fontSize: "14px",
                  }}
                  placeholder="Email subject line"
                />
              </div>

              {/* Editor Toolbar */}
              <div
                style={{
                  display: "flex",
                  gap: "8px",
                  marginBottom: "8px",
                  padding: "8px",
                  backgroundColor: "#f8f9fa",
                  borderRadius: "6px 6px 0 0",
                  borderBottom: "1px solid #e5e5e5",
                }}
              >
                <button
                  onClick={() => formatContent(content, "bold")}
                  style={{
                    padding: "4px 8px",
                    border: "1px solid #e5e5e5",
                    backgroundColor: "white",
                    borderRadius: "4px",
                    cursor: "pointer",
                  }}
                >
                  <FiBold size={14} />
                </button>
                <button
                  onClick={() => formatContent(content, "italic")}
                  style={{
                    padding: "4px 8px",
                    border: "1px solid #e5e5e5",
                    backgroundColor: "white",
                    borderRadius: "4px",
                    cursor: "pointer",
                  }}
                >
                  <FiItalic size={14} />
                </button>
                <button
                  onClick={() => formatContent(content, "link")}
                  style={{
                    padding: "4px 8px",
                    border: "1px solid #e5e5e5",
                    backgroundColor: "white",
                    borderRadius: "4px",
                    cursor: "pointer",
                  }}
                >
                  <FiLink size={14} />
                </button>
                <button
                  style={{
                    padding: "4px 8px",
                    border: "1px solid #e5e5e5",
                    backgroundColor: "white",
                    borderRadius: "4px",
                    cursor: "pointer",
                  }}
                >
                  <FiList size={14} />
                </button>
                <button
                  style={{
                    padding: "4px 8px",
                    border: "1px solid #e5e5e5",
                    backgroundColor: "white",
                    borderRadius: "4px",
                    cursor: "pointer",
                  }}
                >
                  <FiAlignLeft size={14} />
                </button>
              </div>

              <div style={{ marginBottom: "20px" }}>
                <textarea
                  className="template-editor"
                  value={content}
                  onChange={(e) => setContent(e.target.value)}
                  style={{
                    width: "100%",
                    height: "300px",
                    padding: "12px",
                    border: "1px solid #e5e5e5",
                    borderRadius: "0 0 6px 6px",
                    fontSize: "14px",
                    lineHeight: "1.5",
                    resize: "vertical",
                    fontFamily: "monospace",
                  }}
                  placeholder="Enter your email template content..."
                />
              </div>

              <button
                onClick={editingTemplate ? handleUpdateTemplate : handleSaveTemplate}
                style={{
                  width: "100%",
                  padding: "12px",
                  backgroundColor: "#5563FF",
                  color: "white",
                  border: "none",
                  borderRadius: "6px",
                  cursor: "pointer",
                  fontSize: "14px",
                  fontWeight: "500",
                }}
              >
                {editingTemplate ? "Update" : "Save"}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Preview Modal */}
      {showPreviewModal && previewTemplate && (
        <div
          style={{
            position: "fixed",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: "rgba(0,0,0,0.5)",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            zIndex: 1000,
          }}
        >
          <div
            style={{
              backgroundColor: "white",
              borderRadius: "12px",
              width: "600px",
              maxHeight: "80vh",
              overflow: "auto",
            }}
          >
            <div style={{ padding: "24px" }}>
              <div
                style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: "20px" }}
              >
                <h3 style={{ fontSize: "18px", fontWeight: "bold", margin: 0 }}>Email preview</h3>
                <button
                  onClick={closeAllModals}
                  style={{ border: "none", backgroundColor: "transparent", cursor: "pointer" }}
                >
                  <FiX size={20} />
                </button>
              </div>

              <div
                style={{
                  backgroundColor: "#f8f9fa",
                  padding: "16px",
                  borderRadius: "8px",
                  marginBottom: "16px",
                  fontSize: "12px",
                  color: "#666",
                }}
              >
                <div>from: {previewTemplate.replyTo || "hr@company.com"}</div>
                <div>to: John Doe john.doe@email.com</div>
                <div>reply to: {previewTemplate.replyTo || "hr@company.com"}</div>
                <div>subject: {previewTemplate.subject || previewTemplate.templateName}</div>
              </div>

              <div
                style={{
                  backgroundColor: "white",
                  padding: "20px",
                  border: "1px solid #e5e5e5",
                  borderRadius: "8px",
                  fontSize: "14px",
                  lineHeight: "1.6",
                  whiteSpace: "pre-wrap",
                }}
              >
                {previewTemplate.content || "No content available"}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default TemplateEmail
